.. _contributing:

Contributing
============

We welcome contributions from the community! This guide will help you get started with contributing to Debug Player.

Ways to Contribute
------------------

- Report bugs
- Suggest new features
- Improve documentation
- Submit bug fixes
- Write tests
- Improve performance
- Help answer questions

Getting Started
--------------

1. **Fork the repository** on GitHub
2. **Clone your fork** locally:

   .. code-block:: bash

      git clone https://github.com/your-username/debug-player.git
      cd debug-player

3. **Set up the development environment**:

   .. code-block:: bash

      # Create and activate a virtual environment
      python -m venv venv
      source venv/bin/activate  # On Windows: venv\Scripts\activate
      
      # Install development dependencies
      pip install -e .[dev]
      
      # Install pre-commit hooks
      pre-commit install

4. **Create a new branch** for your changes:

   .. code-block:: bash

      git checkout -b fix/your-bug-fix
      # or
      git checkout -b feature/your-new-feature

5. **Make your changes** and ensure tests pass:

   .. code-block:: bash

      # Run tests
      pytest
      
      # Format code
      black .
      isort .
      
      # Check for linting errors
      flake8

6. **Commit your changes** with a descriptive message:

   .. code-block:: bash

      git commit -m "fix: resolve issue with signal loading"

7. **Push your changes** to your fork:

   .. code-block:: bash

      git push origin your-branch-name

8. **Open a pull request** on GitHub

Coding Standards
---------------

Code Style
~~~~~~~~~~

- Follow `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`_ style guide
- Use type hints for all function parameters and return values
- Keep lines under 88 characters (Black enforces this)
- Use absolute imports

Documentation
~~~~~~~~~~~~

- Document all public APIs with docstrings
- Use Google-style docstrings
- Update documentation when making API changes
- Add examples for complex functionality

Testing
~~~~~~~

- Write tests for new features and bug fixes
- Keep tests fast and focused
- Use descriptive test names
- Aim for good test coverage (80%+)

Pull Request Guidelines
----------------------

1. Keep pull requests focused on a single feature or bug fix
2. Update documentation and tests as needed
3. Reference related issues in your PR description
4. Ensure all tests pass before submitting
5. Request reviews from appropriate team members

Code Review Process
------------------

1. A maintainer will review your PR
2. Address any feedback or requested changes
3. Once approved, a maintainer will merge your PR

Reporting Bugs
-------------

When reporting bugs, please include:

1. Steps to reproduce the issue
2. Expected behavior
3. Actual behavior
4. Environment details (OS, Python version, etc.)
5. Any relevant error messages or screenshots

Feature Requests
---------------

For feature requests, please:

1. Describe the feature you'd like to see
2. Explain why this would be useful
3. Provide any relevant use cases or examples

Community Guidelines
------------------

- Be respectful and inclusive
- Keep discussions constructive and on-topic
- Follow the `Code of Conduct <CODE_OF_CONDUCT.md>`_

Getting Help
-----------

- Check the documentation
- Search the issue tracker
- Join our community chat
- Open an issue for specific questions

Thank you for contributing to Debug Player!
