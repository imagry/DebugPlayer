name: Build and Package Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        python-version: 3.12

    - name: Create Conda environment from environment.yml
      run: |
        conda env create -f project_root/environment.yml
        conda activate playback_env  # Activate your environment
        conda install pyinstaller    # Add PyInstaller into the environment

    - name: Build executable with PyInstaller
      run: |
        conda activate playback_env
        pyinstaller --onefile project_root/main.py

    - name: Upload executable
      uses: actions/upload-artifact@v2
      with:
        name: debug_playback-app
        path: dist/main

#  Release the application
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.sha }}
        release_name: 'Release ${{ github.sha }}'
        body: "Automatically generated release."

    - name: Upload Executable to Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/main
        asset_name: debug_playback-app  
        asset_content_type: application/octet-stream

# name: Build and Test

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build-windows:
#     runs-on: windows-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'
#       - name: Install dependencies
#         run: |
#           pip install pyinstaller
#           pip install -r requirements.txt
#       - name: Build EXE
#         run: pyinstaller --onefile your_script.py
#       - name: Upload Windows Executable
#         uses: actions/upload-artifact@v2
#         with:
#           name: windows-executable
#           path: dist/your_script.exe

#   build-linux:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'
#       - name: Install dependencies
#         run: |
#           pip install pyinstaller
#           pip install -r requirements.txt
#       - name: Build Linux Executable
#         run: pyinstaller --onefile your_script.py
#       - name: Upload Linux Executable
#         uses: actions/upload-artifact@v2
#         with:
#           name: linux-executable
#           path: dist/your_script

#   build-macos:
#     runs-on: macos-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Set up Python
#         uses: actions/setup-python@v2
#         with:
#           python-version: '3.x'
#       - name: Install dependencies
#         run: |
#           pip install pyinstaller
#           pip install -r requirements.txt
#       - name: Build MacOS Executable
#         run: pyinstaller --onefile your_script.py
#       - name: Upload MacOS Executable
#         uses: actions/upload-artifact@v2
#         with:
#           name: macos-executable
#           path: dist/your_script
